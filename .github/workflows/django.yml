name: Django CI/CD

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

env:
  DJANGO_SETTINGS_MODULE: bookstore_project.settings
  DEBUG: 1
  CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5673//

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --system
        pip install psycopg2-binary

    - name: Install RabbitMQ server
      run: |
        sudo apt-get update
        sudo apt-get install -y rabbitmq-server

    - name: Start RabbitMQ server
      run: |
        sudo rabbitmq-plugins enable rabbitmq_management
        sudo service rabbitmq-server start

    - name: Download textblob corpora
      run: python -m textblob.download_corpora

    - name: Set environment variables from secrets
      if: (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) || github.event_name == 'push'
      run: |
        echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> $GITHUB_ENV
        echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> $GITHUB_ENV
        echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPEN_AI_KEY }}" >> $GITHUB_ENV
        
    - name: Debug values
      run: |
        echo "Head repo full name: ${{ github.event.pull_request.head.repo.full_name }}"
        echo "Current repository: ${{ github.repository }}"

    - name: Run tests
      run: |
        python manage.py test --parallel --noinput
